BasicGUI is somewhat inspired by Godot's GUI system.
If you've made a custum GUI in Godot, this lsibrary might be for you,
 although you have to keep the tree elements and do all of the rendering yourself.

The GUI is sorted into a tree.
Note that exactly how the children and parent are handled are mostly up to the node, although the external API must be preserved.
 I very highly suggest simply extending from the AbstractContainerNode class, since it does the dirty work for you. (such as managing children)


Here is an example class tree:


                        VStack
                        |
        IContainerNode--|-HStack
        |               |
INode---|               Grid
        |
        |               TextElement
        |               |
        IElementNode----|-ColorRect
                        |
                        |-ImageRect

Here is an example GUI in beautiful ASCII art:

_________________________
Banana     |Yellow      |
___________|____________|
Apple      |Red         |
___________|____________|
Dragonfruit|Red         |
___________|____________| //Pretend these weird gaps don't exist.
Mango      |Multicolored|
___________|____________|

And the tree for such beautiful creation:

            |-"banana"
            |-"Yellow"
            |-"Apple"
            |-"Red"
Table(2x4)--|-"Dragonfruit"
            |-"Red"
            |-"Mango"
            |-"Multicolored"


the Table container creates a table like so:
-The children act as the table elements, filling it in left to right, then top to bottom.
-The size of each cell can either be static, or change depending on the children's sizes.

Speaking of units, the unit system *generally* assumes that each unit is a square pixel.
Although technically the units you put in are the ones that come out, assuming the aspect ratio matches the monitor, so anything goes.
As long as your IDisplay implementation and GUI code use the same units, everything *should* just work, although the built-in GUIs might look weird.


The GUI elements are determined through a depth-first iteration through each contaier.
First the container calls the Iterate method on all of its children.
It then determines the positions of its children and figures out what size it is. The function looks like this:
"
void Iterate()
{
    //This first loop is done for you in AbstractContainerNode
    foreach(INode node in GetChildren)
    {
        if(node is IContainerNode container)
        {
            contaier.Iterate();
        }
    }
    //Position its elemental children - you must do this yourself if you make a custom container.
    // Simply implement AbstractContainerNode and create the function PositionChildren.

    this.DetermineBounds(); //This is required so the parent actually knows what size we are.
}
"
Note that, in general, null positions or dimentions are assumed to be zero, using the '?? 0' syntax.

After the relaative positions are all found, a final recursive function similar to iterate is called.
All it does is add the position coodtinates of the parent to each child, so the position read by the bounds becomes the absolute position.
This code is run in that function:
{
XPos = XPos ?? 0;//set null values to zero
YPos = YPos ?? 0;
this.XPos += _parent.XPos ?? 0;
this.YPos += _parent.YPos ?? 0;
}
Literally, it just adds the parent's position to its own, then calls its childrens Absolutize functions.

You must first programatically build your UI.
It's often useful to draw your GUI first, and then plan out the final tree.

Here is an example:
(You can find it in the Raylib table example)
_____________________________________________________________________________________
|                                                                                   |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|_________________________                                                          |
|Fruit      |Color       |                                                          |
|___________|____________|                                                          |
|Banana     |Yellow      |                                                          |
|___________|____________|                                                          |
|Apple      |Red         |                                                          |
|___________|____________|   Mysteriously Centered Text                             |
|Dragonfruit|Red         |                                                          |
|___________|____________|                                                          |
|Mango      |Multicolored|                                                          |
|___________|____________|                                                          |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|                                                                                   |
|___________________________________________________________________________________|

And the tree for such beautiful creation:


|-LayoutContainer(center, center)--"Mysteriously Centered Text"
| 
|                                            |-"banana"
|                                            |-"Yellow"
|                                            |-"Apple"
|                                            |-"Red"
|-LayoutContainer(left, center)--Table(2x4)--|-"Dragonfruit"
                                             |-"Red"
                                             |-"Mango"
                                             |-"Multicolored"

See the Raylib Tree example for the actual code.

INTERACTIVE ELEMENTS:

Interactive elements in BasicGUI are pretty similar to with non-interactive ones.
An interactive element is just an element that does things depending on the inputs od the IDisplay during the Interact runthrough.

Every frame, these methods are called in order:
-Iterate
-Absolutize
-Interact
-draw

Interactive elements should place their code in the Interact method. 
IDisplay should contain methods to retrieve information such as the cursor position, which keyboard keys are pressed, etc.

When an element is selected, it should call the parent node's "onSelect" method 
in order to let all elements within the tree know that if they are selected, they should be deselected.

In order to detect if your element is selected, call the parents "selectedObject" method and see if it equals your element.