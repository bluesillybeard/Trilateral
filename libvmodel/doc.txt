VMF files are literally just a series of tags.

Any path referenced by a vmf file is relative to the folder that contains the file.

For example, if a file path is "vmf/test.vmf", then any path it references will be appended to "vmf/".
So, if test.vmf has the texture path of "../texture/test.png" then the real path is "vmf/../texture/test.png", or "texture/test.png"

here is a legacy example (GrassCube.vmf):
"""
type: entity
mesh: ../mesh/GrassCube.vmesh
texture: ../texture/GrassCube.vqoi
"""

Here is another example - this one has the model details in the same folder as the vmf file:
"""
type:entity
mesh: mesh.vmesh
texture: texture.png
"""

non-legacy example (equivalent to the legacy GrassCube.vmf):

"""
type:3-2-3-entity
mesh: ../mesh/GrassCube.vmesh
texture: ../texture/GrassCube.vqoi
"""
The examples given are legacy files since they are a lot eaiser to understand. The modern format will be described later.

a .qoi image is, well, an image compressed using the QOI format. look it up, it's actually pretty neat.
.vqoi is a modified version of qoi to fix an issue with alternating pixels that have the same hash, causing compression rates to plummit.
qoi was designed to be as simple as possible, but with some modifications it can be much better.
They weren't implemented into the final qoi standard since they made it significantly more complicated.
The reason I am using QOI is because it's a freaking crap ton faster, and it has comparable (often better) compression to png.
Most of qoi's compression comes from RLE, so noise doesn't compress well.

Here is an example for a legacy block model:
"""
type: block
mesh: ../mesh/StoneBlock.vbmesh
blocks: 31
texture: ../texture/StoneBlock/vqoi
"""

equivalent non-legacy block model equivalent to the one above:
"""
type: 3-2-3block
mesh: ../mesh/StoneBlock.vbmesh
blocks: b11111
texture: ../texture/StoneBlock/vqoi
"""

vmesh and vbmesh files are pretty simple.

NOTE: Everything is little endian.

vmesh (version 0):
4 bytes    : uint with the number of vertices. Variable "V"
4 bytes    : uint with the number of triangles. Variable "I"
4 bytes    : the version number. (0)
V*4*8 bytes:|the vertex data. Each vertex contains 8 elements that are all 32 bit floats. (thus the v*4*8).
            |the first 3 floats are the (x y z) components of the spacial coordinate.
            |the next 2 are the (x y) components of the texture coordinate.
            |the last 3 are the (x y z) components of the surface normal.
             If all three normal components are set to 0, backface culling and smooth lighting are disabled for this mesh.
I*4*3 bytes: the indices, in unsigned 32 bit ints.

vmesh version 1 is described later.

vbmesh:
NOTE:The format starts off as an entire vmesh containing the basic mesh. In fact, a vbmesh can be read as a vmesh without any issues.
I bytes: the removable triangles. One byte for each triangle in the mesh.

Each removable triangle is a byte that contains which faces have to be blocked in order for that triangle to be culled.
Every face set as a 1 for a triangle has to be blocked in order for it to be culled; most triangles only have one face set.
It is worth noting that if every face is blocked, the entire block will be culled skipping any mesh data it contains altogether.

The faces are organized like so:
bit 1 :top (+y)
bit 2 :bottom(-y)
bit 4 :side (-z OR +z; -z if the formula ((x + z) & 1) - 0.5f evaluates to -1)
The formula "(z + x & 1) * -2 + 1 + z" can be used to get the Z position of the block that touches the z side of a block. I don't know how I figured this out, but I did.
bit 8 :side (-x)
bit 16:side (+x)
bits 32, 64, and 128 are unused and ignored. Theoretically, they could be used to hide a secret message...

The blocked faces of a block model (the faces that the block will block from being seen on other blocks) are stored within the VMF file, not the vbmesh.
This is because both the mesh and the texture can be modified to where it won't be blocked;
both a model that allows it to be viewed through and transparent texture can reveal something that would otherwise be blocked.

CHUNK POSITIONING
the Y and Z scales are 0.5, while the X scale is 0.28867513459481288225